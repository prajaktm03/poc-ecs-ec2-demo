name: Deploy to ECS-EC2 

on:
  workflow_dispatch:  # Allow manual trigger of the deployment workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get Latest Image URI
        id: get_image_uri
        run: |
          IMAGE_TAG=$(aws ecr describe-images --repository-name demo-app-repo \
                    --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text)
          if [ -z "$IMAGE_TAG" ]; then
            echo "Error: Unable to fetch the latest image tag."
            exit 1
          fi
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/demo-app-repo:$IMAGE_TAG"
          echo "LATEST_IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Get VPC ID
        id: get_vpc_id
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=your-vpc-name" --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID fetched: $VPC_ID"
          if [ "$VPC_ID" == "None" ]; then
            echo "Error: Unable to fetch VPC ID."
            exit 1
          fi
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: List Security Groups
        run: |
          SG_OUTPUT=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --output json)
          echo "Security Group Output: $SG_OUTPUT"
          echo "$SG_OUTPUT" | jq -r '.SecurityGroups[] | "\(.GroupId) \(.Tags // [])"'
      
      - name: Fetch Security Group ID
        run: |
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=ecs-service-sg" --query "SecurityGroups[0].GroupId" --output text)
          echo "SG_ID fetched: $SG_ID"
          if [ "$SG_ID" == "None" ]; then
            echo "Error: Unable to fetch Security Group ID."
            exit 1
          fi
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV

      - name: Describe Current ECS Task Definition
        id: describe_task
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition demo-app-task)
          echo "$TASK_DEFINITION" > current_task_definition.json

      - name: Output Current Task Definition
        run: |
          cat current_task_definition.json  # Output the current task definition for debugging

      - name: Register New ECS Task Definition
        id: register_task_def
        run: |
          # Update the Task Definition JSON to include the new Image URI and Security Group ID
          jq --arg IMAGE_URI "${{ env.LATEST_IMAGE_URI }}" --arg SG_ID "${{ env.SG_ID }}" \
            --arg SUBNET_ID "${{ secrets.SUBNET_ID }}" \
            '{
              family: "demo-app-task",
              networkMode: "awsvpc",
              requiresCompatibilities: ["FARGATE"],
              containerDefinitions: (if .containerDefinitions then [.containerDefinitions[] | .image = $IMAGE_URI] else [] end),
              networkConfiguration: {
                awsvpcConfiguration: {
                  subnets: [$SUBNET_ID],
                  securityGroups: [$SG_ID],
                  assignPublicIp: "ENABLED"
                }
              }
            }' \
            current_task_definition.json > new_task_definition.json

          TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://new_task_definition.json \
                                --query "taskDefinition.taskDefinitionArn" --output text)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to register new task definition."
            exit 1
          fi
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

      - name: Deploy New Task Definition to ECS Service
        run: |
          aws ecs update-service \
            --cluster example-ecs-cluster \
            --service example-ecs-service \
            --force-new-deployment \
            --task-definition ${{ env.TASK_DEFINITION_ARN }}
          if [ $? -ne 0 ]; then
            echo "Error: Failed to update ECS service."
            exit 1
          fi

      - name: Cleanup Temporary Files
        run: |
          rm -f current_task_definition.json new_task_definition.json
