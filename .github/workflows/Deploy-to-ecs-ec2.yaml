name: Deploy to ECS-EC2 

on:
  workflow_dispatch:  # Allow manual trigger of the deployment workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get Latest Image URI
        id: get_image_uri
        run: |
          IMAGE_TAG=$(aws ecr describe-images --repository-name demo-app-repo \
                    --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text)
          if [ -z "$IMAGE_TAG" ]; then
            echo "Error: Unable to fetch the latest image tag."
            exit 1
          fi
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/demo-app-repo:$IMAGE_TAG"
          echo "LATEST_IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Debug Print fetched IMAGE_TAG
        run: echo "Fetched IMAGE_TAG is:${{ env.LATEST_IMAGE_URI }}"

      - name: Get First VPC ID
        id: get_vpc_id
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID fetched: $VPC_ID"
          if [ "$VPC_ID" == "None" ]; then
            echo "Error: Unable to fetch VPC ID."
            exit 1
          fi
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Get Subnet ID
        id: get_subnet_id
        run: |
          SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=${{ env.VPC_ID }}" --query "Subnets[0].SubnetId" --output text)
          echo "SUBNET_ID fetched: $SUBNET_ID"
          if [ "$SUBNET_ID" == "None" ]; then
            echo "Error: Unable to fetch Subnet ID."
            exit 1
          fi
          echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV

      - name: Get Security Group ID
        id: get_sg_id
        run: |
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=${{ env.VPC_ID }}" "Name=group-name,Values=your-sg-name" --query "SecurityGroups[0].GroupId" --output text)
          echo "SG_ID fetched: $SG_ID"
          if [ "$SG_ID" == "None" ]; then
            echo "Error: Unable to fetch Security Group ID."
            exit 1
          fi
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV

      # Continue with the other deployment steps...
